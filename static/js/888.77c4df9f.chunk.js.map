{"version":3,"file":"static/js/888.77c4df9f.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/BackButton/BackButton.module.css?d3a5","components/BackButton/BackButton.jsx","webpack://goit-react-hw-05-movies/./src/components/MovieDetails/MovieDetails.module.css?9ca9","components/MovieDetails/MovieDetails.jsx","services/Api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"back__btn\":\"BackButton_back__btn__+0odO\",\"back__btn__text\":\"BackButton_back__btn__text__oCPUr\"};","\nimport css from './BackButton.module.css'\nimport { PropTypes } from \"prop-types\";\n\nexport const BackButton = (onClick, nameBtn) => {\n    return(\n        <button type=\"button\" onClick={onClick} className={css.back__btn}>\n            <span className={css.back__btn__text}>{nameBtn}</span>\n        </button>\n    );\n};\n\nBackButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    nameBtn: PropTypes.string.isRequired,\n  };","// extracted by mini-css-extract-plugin\nexport default {\"movieCard\":\"MovieDetails_movieCard__LWJIF\",\"movieCard__block\":\"MovieDetails_movieCard__block__BV6fs\",\"movieCard__img\":\"MovieDetails_movieCard__img__hEH-T\",\"movieCard__list\":\"MovieDetails_movieCard__list__0hG6a\",\"movieCard__header\":\"MovieDetails_movieCard__header__wQnl+\",\"movieCard__text\":\"MovieDetails_movieCard__text__eIxKN\"};","\nimport css from './MovieDetails.module.css'\nimport {Outlet, useParams, useNavigate, useLocation} from 'react-router-dom';\nimport { BackButton } from \"components/BackButton/BackButton\";\nimport * as moviesAPI from 'services/Api';\nimport { NavLink } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\n\nexport const MovieDetails = () => {\n   \n    const { movieId } = useParams();\n    const [movie, setMovie] = useState(null);\n\n    const navigate = useNavigate();\n\n    const location = useLocation();\n  \n    useEffect(() => {\n      moviesAPI.getMoviesById(movieId).then(response => setMovie(response));\n    }, [movieId]);\n\n    const poster = poster_path => {\n      return poster_path === null\n      ? 'https://i.postimg.cc/G2jSRfZG/images.png'\n      : `https://image.tmdb.org/t/p/w300${poster_path}`;\n    };\n  \n\n    \n    const allGenres = genres => {\n      if (genres === null) {\n        return;\n      }\n      return genres.map(genre => genre.name).join(', ');\n    };\n  \n    const onBtnClick = () => {\n \n      location.state\n        ? navigate(location.state.pathname + location.state.search)\n        : navigate('/');\n    };\n\n    return (\n        <div>\n                 \n          {movie && (\n            <div>\n                <BackButton\n                    onClick={onBtnClick}\n                    nameBtn={'go BACK'}\n                />\n                <div className={css.movieCard}>\n                    <div className={css.movieCard__block}>\n                        <img\n                        className={css.movieCard__img}\n                        src={`${poster(movie.poster_path)}`}\n                        alt={movie.title}\n                        />\n\n\n                        <div className={css.movieCard__list}>\n                            <h2  className={css.movieCard__header}>\n                               {movie.title} ({movie.release_date.slice(0, 4)})\n                            </h2>\n                            <p className={css.movieCard__text}>Use Score: {Math.round((movie.vote_average / 10) * 100)}%</p>\n                            <h3 className={css.movieCard__header}>Overwiew</h3>\n                            <p className={css.movieCard__text}>{movie.overview}</p>\n                            <h3 className={css.movieCard__header}>Genres</h3>\n                            <p className={css.movieCard__text}>{`${allGenres(movie.genres)}`}</p>\n                        </div>\n                    </div>\n              </div>\n              <h2> Additional information </h2>\n              <NavLink to={`/movies/${movie.id}/cast`} state={location.state}>\n                Cast\n              </NavLink>\n              <NavLink to={`/movies/${movie.id}/reviews`} state={location.state}>\n                Reviews\n              </NavLink>\n    \n              <Outlet />\n            </div>\n          )}\n        </div>\n      );\n\n}\n\n\n/*return(\n    <div className={css.movieCard}>\n        <div className={css.movieCard__block}>\n            <img\n                className={css.movieCard__img}\n                src ={\n                   poster_path\n                    ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                    : 'https://i.postimg.cc/G2jSRfZG/images.png'\n                }\n                alt={title ? title : name}\n            />\n       \n            <div className={css.movieCard__list}>\n                <h2  className={css.movieCard__header}>\n                    {title ? title : name} ({release_date.slice(0, 4)})\n                </h2>\n                <p className={css.movieCard__text}>Use Score: {Math.round((vote_average / 10) * 100)}%</p>\n                <h3 className={css.movieCard__header}>Overwiew</h3>\n                <p className={css.movieCard__text}>{overview}</p>\n                <h3 className={css.movieCard__header}>Genres</h3>\n                <p className={css.movieCard__text}>{genres.map(item => item.name).join(' ,')}</p>\n            </div>\n        </div>\n    </div>\n)*/","\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0069cb276a083aad6acda19b3adb7038';\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n// гет-запит  по  пошуку фільму\nexport function getMovieBySearch(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?&query=${query}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n  );\n}\n// гет-запит для актерського складу\nexport function getCast(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n//  гет=запит для оглядів чи відкугів на фільм\nexport function getReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n//  гет-запит популярних фільмів\nexport function GetTrending() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n// гет-запит про інфо фільму по айді\nexport function getMoviesById(movieId) {\n  // а тут наоборот єкспанд автор - когда мі забираем одну книжку, мі прикрепляем к ней ее автора, тоже по айдишнику\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n}"],"names":["BackButton","onClick","nameBtn","type","className","css","MovieDetails","movieId","useParams","useState","movie","setMovie","navigate","useNavigate","location","useLocation","useEffect","moviesAPI","then","response","poster_path","state","pathname","search","src","alt","title","release_date","slice","Math","round","vote_average","overview","genres","map","genre","name","join","allGenres","to","id","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","ok","json","Promise","reject","Error","getMovieBySearch","query","getCast","getReviews","GetTrending","getMoviesById"],"sourceRoot":""}
{"version":3,"file":"static/js/425.893e7c29.chunk.js","mappings":"gMACA,GAAgB,UAAY,6BAA6B,gBAAkB,mCAAmC,iBAAmB,oCAAoC,eAAiB,mC,8DCMvK,SAASA,IAEpB,OAAqCC,EAAAA,EAAAA,YAArC,eAAMC,EAAN,KAAmBC,EAAnB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAMjBC,EAAAA,EAAAA,YAAU,WACqB,KAAvBR,EAAYS,OAahBC,EAAAA,GAA2BV,GAAaW,MAAK,SAAAC,GAC3C,GAAgC,IAA5BA,EAASC,QAAQC,OACnB,OAAOC,EAAAA,EAAAA,IACH,+CAAgD,CAC5CC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAKpBpB,EAAUS,EAASC,QAEpB,KA7BGE,EAAAA,EAAAA,IAAM,8BAA+B,CACnCC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,GAuBjB,GAAE,CAACvB,IASN,OAEQ,iBAAKwB,UAAWC,EAAAA,UAAhB,WACI,kBAAMD,UAAWC,EAAAA,gBAAqBC,SAV1B,SAAA1B,GAEpBI,EAAS,kBAAD,OAAmBJ,IAC3BC,EAAeD,GACfG,EAAU,GACX,EAKS,WACI,kBACIqB,UAAWC,EAAAA,iBACXE,KAAK,OACLC,MAAO5B,EACP6B,aAAa,MACbC,SAtDC,SAAAC,GACjB9B,EAAe8B,EAAEC,cAAcJ,MAAMK,cACxC,EAqDmBC,YAAY,eACZC,WAAS,KAGb,mBAAQX,UAAWC,EAAAA,eAAoBE,KAAK,SAA5C,UACI,kBAAOH,UAAWC,EAAAA,yBAI1B,SAAC,KAAD,IACCvB,IACG,wBACKA,EAAOkC,KAAI,SAAAC,GAAK,OACb,SAAC,KAAD,CACAC,GAAE,kBAAaD,EAAME,IACrBC,MAAOlC,EAFP,UAKA,uBAAI+B,EAAMI,SAFLJ,EAAME,GAJE,QAaxC,C,sLC7FKG,EAAW,+BACXC,EAAU,mCAAhB,SACeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,CAAC,EAA1D,SACyBC,MAAMF,EAAKC,GADpC,YACQlC,EADR,QAEkBoC,GAFlB,iCAGYpC,EAASqC,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,EAAiBC,GAC/B,OAAOV,EAAuB,GAAD,OACxBF,EADwB,gCACQY,EADR,oBACyBX,EADzB,8CAG9B,CAEM,SAASY,EAAQC,GACtB,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,kBACNc,EADM,4BACqBb,EADrB,mBAG9B,CAEM,SAASc,EAAWD,GACzB,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,kBACNc,EADM,4BACqBb,EADrB,0BAG9B,CAEM,SAASe,IACd,OAAOd,EAAuB,GAAD,OACxBF,EADwB,uCACeC,GAE7C,CAEM,SAASgB,EAAcH,GAE5B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,kBACNc,EADM,oBACab,GAE3C,C","sources":["webpack://goit-react-hw-05-movies/./src/page/SearchBar/SearchBar.module.css?ff4c","page/SearchBar/SearchBar.jsx","services/Api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchBar\":\"SearchBar_searchBar__cJ8dU\",\"searchBar__form\":\"SearchBar_searchBar__form__QRN8x\",\"searchBar__input\":\"SearchBar_searchBar__input__5JlP2\",\"searchBar__btn\":\"SearchBar_searchBar__btn__G0pOJ\"};","import css from './SearchBar.module.css'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useState, useEffect } from 'react';\nimport { NavLink, useLocation, useNavigate } from 'react-router-dom';\nimport * as moviesAPI from 'services/Api';\n\nexport default function SearchBar () {\n    \n    const[searchMovie, setSearchMovie] = useState();\n    const [movies, setMovies] = useState([]);\n    const navigate = useNavigate();\n    const location = useLocation();\n\n    const hendlerInput = e => {\n        setSearchMovie(e.currentTarget.value.toLowerCase());\n    }\n\n    useEffect(() => {\n        if (searchMovie.trim() === '') {\n            toast('enter the name of the movie', {\n              position: 'top-right',\n              autoClose: 3000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            return;\n          }\n\n        moviesAPI.getMovieBySearch(searchMovie).then(response => {\n          if (response.results.length === 0) {\n            return toast(\n                'Sorry, no movies were found for your request', {\n                    position: 'top-right',\n                    autoClose: 3000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                }\n            );\n          }\n\n          setMovies(response.results);\n        \n        });\n      }, [searchMovie]);\n    \n      const hendlerSubmit = searchMovie => {\n       \n        navigate(`/movies/?query=${searchMovie}`);\n        setSearchMovie(searchMovie);\n        setMovies([]);\n      };\n\n    return (\n\n            <div className={css.searchBar}>\n                <form className={css.searchBar__form} onSubmit={hendlerSubmit}>\n                    <input\n                        className={css.searchBar__input}\n                        type=\"text\"\n                        value={searchMovie}\n                        autoComplete=\"off\"\n                        onChange={hendlerInput}\n                        placeholder=\"Search Films\"\n                        autoFocus\n                    >\n                    </input>\n                    <button className={css.searchBar__btn} type=\"submit\">\n                        <label className={css.searchBar__lable}>\n                        </label>\n                    </button>\n                </form>\n                <ToastContainer />\n                {movies && (\n                    <ul>\n                        {movies.map(movie => (\n                            <NavLink\n                            to={`/movies/${movie.id}`}\n                            state={location}\n                            key={movie.id}\n                            >\n                            <p>{movie.title}</p>\n                            </NavLink>\n                        ))}\n                    </ul>\n                )}\n            </div>\n    );\n}\n\n\n\n\n","\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0069cb276a083aad6acda19b3adb7038';\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n// гет-запит  по  пошуку фільму\nexport function getMovieBySearch(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?&query=${query}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n  );\n}\n// гет-запит для актерського складу\nexport function getCast(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n//  гет=запит для оглядів чи відкугів на фільм\nexport function getReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n//  гет-запит популярних фільмів\nexport function GetTrending() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n// гет-запит про інфо фільму по айді\nexport function getMoviesById(movieId) {\n  // а тут наоборот єкспанд автор - когда мі забираем одну книжку, мі прикрепляем к ней ее автора, тоже по айдишнику\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n}"],"names":["SearchBar","useState","searchMovie","setSearchMovie","movies","setMovies","navigate","useNavigate","location","useLocation","useEffect","trim","moviesAPI","then","response","results","length","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","className","css","onSubmit","type","value","autoComplete","onChange","e","currentTarget","toLowerCase","placeholder","autoFocus","map","movie","to","id","state","title","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","ok","json","Promise","reject","Error","getMovieBySearch","query","getCast","movieId","getReviews","GetTrending","getMoviesById"],"sourceRoot":""}